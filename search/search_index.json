{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Token Counter Docs","text":"<p>This document is about my personal project for token counter.</p>"},{"location":"#tutorials","title":"Tutorials","text":"<p>You can see more detail about the project in tutorial, which serve as the project tutorial.</p> <p>The source code can be found on Github, the website is https://github.com/percent4/package_python_project .</p>"},{"location":"#project-overview","title":"Project overview","text":"<p>Count tokens using OpenAI tiktoken module</p> <p>Classes exported by this package:</p> <ul> <li><code>TokenCounter</code>: Provide counting token in user input.</li> </ul>"},{"location":"#others","title":"Others","text":"<p>The project is useful for Python project with packaging and documentation.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#reference","title":"Reference","text":"<ol> <li>openai/tiktoken: https://github.com/openai/tiktoken</li> </ol>"},{"location":"tutorials/","title":"Tutorial","text":"<p>This path the project documentation focuses on the realize of TokenCounter Class. Now it only support the models of OpenAI GPT mode, such as <code>gpt-3.5-turbo</code>.</p> <p>TokenCounter</p> <p>to use TokenCounter, you shoule use:</p> <pre><code>from token_counter.token_count import TokenCounter\n</code></pre>"},{"location":"tutorials/#src.token_counter.token_count.TokenCounter","title":"<code>TokenCounter</code>","text":"<p>             Bases: <code>object</code></p> <p>The class is for count tokens in user input.</p> Source code in <code>src/token_counter/token_count.py</code> <pre><code>class TokenCounter(object):\n    \"\"\"The class is for count tokens in user input.\n    \"\"\"\n    def __init__(self, model: str = \"gpt-3.5-turbo\"):\n        \"\"\"`__init__` method\n\n        the `__init__` method of the class\n\n        Notes:\n            the model name now only support OpenAI GPT models\n\n        Args:\n            model: the name of models, e.g. `gpt-3.5-turbo`\n        \"\"\"\n        self.model = model\n\n    def count(self, _input: Union[List[str], str]) -&gt; Union[List[int], int]:\n        \"\"\"count the tokens of _input in string or list of string format\n\n        count the tokens of _input using OpenAI tiktoken module, the model is `gpt-3.5-turbo`\n        by default. if the model is not supported, then use `cl100k_base` as backup.\n\n        Args:\n            _input: the input string or list of string\n\n        Examples:\n            &gt;&gt;&gt; token_counter = TokenCounter()\n            &gt;&gt;&gt; token_counter.count(\"who are you?\")\n            4\n            &gt;&gt;&gt; token_counter.count([\"who are you?\", \"How's it going on?\"])\n            [4, 6]\n\n        Raises:\n            NotImplementedError: if `model` is not in the list\n\n        Returns:\n            the number of token of a string or the list of token of each string in list\n        \"\"\"\n        try:\n            encoding = tiktoken.encoding_for_model(self.model)\n        except KeyError:\n            print(\"Warning: model not found. Using cl100k_base encoding.\")\n            encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n        if isinstance(_input, list):\n            token_count_list = []\n            for text in _input:\n                token_count_list.append(len(encoding.encode(text)))\n            return token_count_list\n        elif isinstance(_input, str):\n            return len(encoding.encode(_input))\n        else:\n            raise NotImplementedError(f\"not support data type for {type(_input)}, please use str or List[str].\")\n</code></pre>"},{"location":"tutorials/#src.token_counter.token_count.TokenCounter.__init__","title":"<code>__init__(model='gpt-3.5-turbo')</code>","text":"<p><code>__init__</code> method</p> <p>the <code>__init__</code> method of the class</p> Notes <p>the model name now only support OpenAI GPT models</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>the name of models, e.g. <code>gpt-3.5-turbo</code></p> <code>'gpt-3.5-turbo'</code> Source code in <code>src/token_counter/token_count.py</code> <pre><code>def __init__(self, model: str = \"gpt-3.5-turbo\"):\n    \"\"\"`__init__` method\n\n    the `__init__` method of the class\n\n    Notes:\n        the model name now only support OpenAI GPT models\n\n    Args:\n        model: the name of models, e.g. `gpt-3.5-turbo`\n    \"\"\"\n    self.model = model\n</code></pre>"},{"location":"tutorials/#src.token_counter.token_count.TokenCounter.count","title":"<code>count(_input)</code>","text":"<p>count the tokens of _input in string or list of string format</p> <p>count the tokens of _input using OpenAI tiktoken module, the model is <code>gpt-3.5-turbo</code> by default. if the model is not supported, then use <code>cl100k_base</code> as backup.</p> <p>Parameters:</p> Name Type Description Default <code>_input</code> <code>Union[List[str], str]</code> <p>the input string or list of string</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; token_counter = TokenCounter()\n&gt;&gt;&gt; token_counter.count(\"who are you?\")\n4\n&gt;&gt;&gt; token_counter.count([\"who are you?\", \"How's it going on?\"])\n[4, 6]\n</code></pre> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>if <code>model</code> is not in the list</p> <p>Returns:</p> Type Description <code>Union[List[int], int]</code> <p>the number of token of a string or the list of token of each string in list</p> Source code in <code>src/token_counter/token_count.py</code> <pre><code>def count(self, _input: Union[List[str], str]) -&gt; Union[List[int], int]:\n    \"\"\"count the tokens of _input in string or list of string format\n\n    count the tokens of _input using OpenAI tiktoken module, the model is `gpt-3.5-turbo`\n    by default. if the model is not supported, then use `cl100k_base` as backup.\n\n    Args:\n        _input: the input string or list of string\n\n    Examples:\n        &gt;&gt;&gt; token_counter = TokenCounter()\n        &gt;&gt;&gt; token_counter.count(\"who are you?\")\n        4\n        &gt;&gt;&gt; token_counter.count([\"who are you?\", \"How's it going on?\"])\n        [4, 6]\n\n    Raises:\n        NotImplementedError: if `model` is not in the list\n\n    Returns:\n        the number of token of a string or the list of token of each string in list\n    \"\"\"\n    try:\n        encoding = tiktoken.encoding_for_model(self.model)\n    except KeyError:\n        print(\"Warning: model not found. Using cl100k_base encoding.\")\n        encoding = tiktoken.get_encoding(\"cl100k_base\")\n\n    if isinstance(_input, list):\n        token_count_list = []\n        for text in _input:\n            token_count_list.append(len(encoding.encode(text)))\n        return token_count_list\n    elif isinstance(_input, str):\n        return len(encoding.encode(_input))\n    else:\n        raise NotImplementedError(f\"not support data type for {type(_input)}, please use str or List[str].\")\n</code></pre>"}]}